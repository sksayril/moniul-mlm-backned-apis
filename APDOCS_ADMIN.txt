==============================================
API DOCUMENTATION - ADMIN ENDPOINTS
==============================================

BASE URL: http://localhost:3100

NOTE: All admin endpoints require:
1. A valid JWT token (from login)
2. User must have "admin" role

--------------------------------------------------
1. GET ALL USERS
--------------------------------------------------
Endpoint: GET /api/admin/users
Description: Get a list of all registered users

Request:
```
GET /api/admin/users HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

Success Response (200 OK):
```
{
  "status": "success",
  "results": 2,
  "data": {
    "users": [
      {
        "_id": "60d5ec9af11ab83456789012",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "user",
        "subscription": {
          "active": true,
          "expiryDate": "2024-06-25T12:00:00.000Z",
          "plan": "premium"
        },
        "tpin": {
          "active": true,
          "requestDate": "2023-06-25T14:30:00.000Z"
        },
        "paymentDetails": [
          {
            "paymentId": "PAYMENT123456",
            "amount": 99.99,
            "currency": "USD",
            "status": "verified",
            "screenshot": "/uploads/payments/60d5ec9af11ab83456789012-1624626000000-payment.jpg",
            "date": "2023-06-25T12:00:00.000Z"
          }
        ],
        "createdAt": "2023-06-25T12:00:00.000Z",
        "updatedAt": "2023-06-25T14:35:00.000Z"
      },
      {
        "_id": "60d5ec9af11ab83456789013",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "subscription": {
          "active": false,
          "expiryDate": null,
          "plan": null
        },
        "tpin": {
          "active": false,
          "requestDate": null
        },
        "paymentDetails": [],
        "createdAt": "2023-06-25T13:00:00.000Z",
        "updatedAt": "2023-06-25T13:00:00.000Z"
      }
    ]
  }
}
```

Error Response (403 Forbidden - Not Admin):
```
{
  "status": "error",
  "message": "You do not have permission to perform this action"
}
```

--------------------------------------------------
2. GET SINGLE USER
--------------------------------------------------
Endpoint: GET /api/admin/users/:id
Description: Get details of a specific user by ID

Request:
```
GET /api/admin/users/60d5ec9af11ab83456789012 HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

Success Response (200 OK):
```
{
  "status": "success",
  "data": {
    "user": {
      "_id": "60d5ec9af11ab83456789012",
      "name": "John Doe",
      "email": "john@example.com",
      "role": "user",
      "subscription": {
        "active": true,
        "expiryDate": "2024-06-25T12:00:00.000Z",
        "plan": "premium"
      },
      "tpin": {
        "active": true,
        "requestDate": "2023-06-25T14:30:00.000Z"
      },
      "paymentDetails": [
        {
          "paymentId": "PAYMENT123456",
          "amount": 99.99,
          "currency": "USD",
          "status": "verified",
          "screenshot": "/uploads/payments/60d5ec9af11ab83456789012-1624626000000-payment.jpg",
          "date": "2023-06-25T12:00:00.000Z"
        }
      ],
      "createdAt": "2023-06-25T12:00:00.000Z",
      "updatedAt": "2023-06-25T14:35:00.000Z"
    }
  }
}
```

Error Response (404 Not Found):
```
{
  "status": "error",
  "message": "No user found with that ID"
}
```

--------------------------------------------------
3. GET PENDING SUBSCRIPTION REQUESTS
--------------------------------------------------
Endpoint: GET /api/admin/subscriptions/pending
Description: Get all pending subscription requests

Request:
```
GET /api/admin/subscriptions/pending HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

Success Response (200 OK):
```
{
  "status": "success",
  "results": 1,
  "data": {
    "pendingRequests": [
      {
        "userId": "60d5ec9af11ab83456789013",
        "userName": "Jane Smith",
        "userEmail": "jane@example.com",
        "paymentId": "PAYMENT789012",
        "paymentDetails": {
          "paymentId": "PAYMENT789012",
          "amount": 99.99,
          "currency": "USD",
          "status": "pending",
          "screenshot": "/uploads/payments/60d5ec9af11ab83456789013-1624630000000-payment.jpg",
          "date": "2023-06-25T13:00:00.000Z"
        },
        "subscriptionPlan": "premium"
      }
    ]
  }
}
```

--------------------------------------------------
4. APPROVE SUBSCRIPTION
--------------------------------------------------
Endpoint: POST /api/admin/subscriptions/approve
Description: Approve a user's subscription request

Request:
```
POST /api/admin/subscriptions/approve HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "userId": "60d5ec9af11ab83456789013",
  "paymentId": "PAYMENT789012"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "Subscription approved successfully",
  "data": {
    "subscription": {
      "active": true,
      "expiryDate": "2024-06-25T13:15:00.000Z",
      "plan": "premium"
    },
    "payment": {
      "paymentId": "PAYMENT789012",
      "amount": 99.99,
      "currency": "USD",
      "status": "verified",
      "screenshot": "/uploads/payments/60d5ec9af11ab83456789013-1624630000000-payment.jpg",
      "date": "2023-06-25T13:00:00.000Z"
    }
  }
}
```

Error Response (404 Not Found):
```
{
  "status": "error",
  "message": "User not found"
}
```

--------------------------------------------------
5. REJECT SUBSCRIPTION
--------------------------------------------------
Endpoint: POST /api/admin/subscriptions/reject
Description: Reject a user's subscription request

Request:
```
POST /api/admin/subscriptions/reject HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "userId": "60d5ec9af11ab83456789013",
  "paymentId": "PAYMENT789012",
  "reason": "Payment verification failed"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "Subscription rejected successfully",
  "data": {
    "payment": {
      "paymentId": "PAYMENT789012",
      "amount": 99.99,
      "currency": "USD",
      "status": "rejected",
      "rejectionReason": "Payment verification failed",
      "screenshot": "/uploads/payments/60d5ec9af11ab83456789013-1624630000000-payment.jpg",
      "date": "2023-06-25T13:00:00.000Z"
    }
  }
}
```

--------------------------------------------------
6. GET PENDING TPIN REQUESTS
--------------------------------------------------
Endpoint: GET /api/admin/tpin/pending
Description: Get all pending TPIN requests

Request:
```
GET /api/admin/tpin/pending HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

Success Response (200 OK):
```
{
  "status": "success",
  "results": 1,
  "data": {
    "pendingRequests": [
      {
        "_id": "60d5ec9af11ab83456789015",
        "name": "Alex Johnson",
        "email": "alex@example.com",
        "tpin": {
          "requestDate": "2023-06-25T15:30:00.000Z",
          "active": false
        },
        "subscription": {
          "active": true,
          "expiryDate": "2024-06-25T12:00:00.000Z",
          "plan": "premium"
        }
      }
    ]
  }
}
```

--------------------------------------------------
7. APPROVE TPIN REQUEST
--------------------------------------------------
Endpoint: POST /api/admin/tpin/approve
Description: Approve a user's TPIN request and generate a TPIN

Request:
```
POST /api/admin/tpin/approve HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "userId": "60d5ec9af11ab83456789015"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "TPIN generated and assigned successfully",
  "data": {
    "tpin": {
      "value": "654321",
      "active": true,
      "requestDate": "2023-06-25T15:30:00.000Z"
    }
  }
}
```

Error Response (404 Not Found):
```
{
  "status": "error",
  "message": "User not found"
}
```

--------------------------------------------------
8. REJECT TPIN REQUEST
--------------------------------------------------
Endpoint: POST /api/admin/tpin/reject
Description: Reject a user's TPIN request

Request:
```
POST /api/admin/tpin/reject HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "userId": "60d5ec9af11ab83456789015",
  "reason": "Suspicious account activity"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "TPIN request rejected successfully"
}
```

--------------------------------------------------
NEW ADMIN USER MANAGEMENT APIs
--------------------------------------------------

⚠️ CRITICAL SECURITY WARNING ⚠️
The following APIs contain security risks and should be used with extreme caution:
- Storing original passwords in plain text is a major security vulnerability
- These APIs should only be used in development or with proper security measures
- Consider implementing proper password recovery instead of storing plain passwords

--------------------------------------------------
1. GET USER WITH ORIGINAL PASSWORD
--------------------------------------------------
Endpoint: GET /api/admin/users/:userId/original-password
Description: Get user details including their original (plain text) password

⚠️ SECURITY RISK: This API exposes plain text passwords!

Request:
```
GET /api/admin/users/LIFE10001/original-password HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

Success Response (200 OK):
```
{
  "status": "success",
  "data": {
    "user": {
      "_id": "60d5ec9af11ab83456789012",
      "name": "John Doe",
      "userId": "LIFE10001",
      "email": "john@example.com",
      "originalPassword": "UserPassword123",
      "mobile": "9876543210",
      "isActive": true,
      "role": "user",
      "rank": "Associate",
      "teamSize": 5,
      "createdAt": "2023-06-25T12:00:00.000Z",
      "updatedAt": "2023-06-25T15:30:00.000Z"
    }
  }
}
```

Error Response (404 Not Found):
```
{
  "status": "error",
  "message": "User not found"
}
```

--------------------------------------------------
2. ACTIVATE USER
--------------------------------------------------
Endpoint: POST /api/admin/users/:userId/activate
Description: Activate a user account that was previously inactive

Request:
```
POST /api/admin/users/LIFE10001/activate HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "reason": "Account restored after review"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "User activated successfully",
  "data": {
    "user": {
      "_id": "60d5ec9af11ab83456789012",
      "name": "John Doe",
      "userId": "LIFE10001",
      "email": "john@example.com",
      "isActive": true,
      "activationReason": "Account restored after review",
      "activatedAt": "2023-06-26T11:30:00.000Z"
    }
  }
}
```

Error Response (400 Bad Request):
```
{
  "status": "error",
  "message": "User is already active"
}
```

--------------------------------------------------
3. DEACTIVATE USER
--------------------------------------------------
Endpoint: POST /api/admin/users/:userId/deactivate
Description: Deactivate/inactivate a user account

Request:
```
POST /api/admin/users/LIFE10001/deactivate HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "reason": "Account suspended for policy violation"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "User deactivated successfully",
  "data": {
    "user": {
      "_id": "60d5ec9af11ab83456789012",
      "name": "John Doe",
      "userId": "LIFE10001",
      "email": "john@example.com",
      "isActive": false,
      "deactivationReason": "Account suspended for policy violation",
      "deactivatedAt": "2023-06-26T10:15:00.000Z"
    }
  }
}
```

Error Response (400 Bad Request):
```
{
  "status": "error",
  "message": "User is already inactive"
}
```

--------------------------------------------------
4. DELETE USER PERMANENTLY
--------------------------------------------------
Endpoint: DELETE /api/admin/users/:userId/delete
Description: Permanently delete a user account

⚠️ DANGEROUS OPERATION: This permanently deletes all user data!

Request:
```
DELETE /api/admin/users/LIFE10001/delete HTTP/1.1
Host: localhost:3100
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "confirmDelete": "YES_DELETE_USER"
}
```

Success Response (200 OK):
```
{
  "status": "success",
  "message": "User deleted permanently",
  "data": {
    "deletedUser": {
      "_id": "60d5ec9af11ab83456789012",
      "name": "John Doe",
      "userId": "LIFE10001",
      "email": "john@example.com",
      "role": "user",
      "isActive": false,
      "teamSize": 5,
      "totalEarnings": 2500.50,
      "deletedAt": "2023-06-26T10:20:00.000Z"
    }
  }
}
```

Error Response (400 Bad Request):
```
{
  "status": "error",
  "message": "To delete user, you must send confirmDelete: \"YES_DELETE_USER\" in request body"
}
```

Error Response (403 Forbidden):
```
{
  "status": "error",
  "message": "Cannot delete admin users"
}
```

--------------------------------------------------
IMPORTANT NOTES:
--------------------------------------------------

1. **Security Warnings:**
   - Original password API exposes plain text passwords
   - Only use in development or with proper security measures
   - Consider implementing password recovery instead

2. **User Deletion:**
   - Requires explicit confirmation with "YES_DELETE_USER"
   - Cannot delete admin users
   - Permanently removes all user data
   - Updates MLM structure by removing user from referral chains

3. **User Activation:**
   - Sets isActive to true for inactive users
   - Stores activation reason and timestamp
   - Clears any previous deactivation data
   - User can login again after activation

4. **User Deactivation:**
   - Sets isActive to false
   - Stores deactivation reason and timestamp
   - User cannot login when deactivated
   - Clears any previous activation data

5. **MLM Impact:**
   - Deletion removes user from referrer's team
   - Orphans direct referrals (removes referrer reference)
   - Activation/deactivation keeps MLM structure intact
